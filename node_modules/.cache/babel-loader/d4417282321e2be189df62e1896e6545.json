{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// import { API } from '../../api';\nimport Swal from \"sweetalert2\";\nconst initialState = {\n  authenticated: false,\n  message: ''\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setAuthSuccess: state => {\n      state.authenticated = true;\n    },\n    setAuthFail: state => {\n      state.authenticated = false;\n    },\n    resetAuth: () => initialState\n  }\n});\nexport const {\n  setAuthSuccess,\n  setAuthFail,\n  resetAuth\n} = authSlice.actions;\nexport const selectAuthState = state => state.auth;\nexport const login = history => async (dispatch) => {\n  try {\n    // TODO: uncomment apiResponse when a backend is deployed\n    // const apiResponse = await API.login(data, {});\n    // if (apiResponse?.status === 200) {\n    if (true) {\n      // dispatch(setUser(apiResponse.data.data))\n      Swal.fire({\n        title: \"Login\",\n        text: \"Login Successful\",\n        icon: \"success\",\n        confirmButtonText: \"OK\"\n      }).then(res => {\n        if (res.isConfirmed) {\n          dispatch(setAuthSuccess());\n          window.localStorage.setItem('AUTH_TOKEN', 'sample');\n          history.replace('/dashboard');\n        }\n      });\n    }\n  } catch (error) {\n    Swal.fire({\n      title: \"Login\",\n      text: `Login Failed. Error encountered '${error.message}'`,\n      icon: \"error\",\n      confirmButtonText: \"OK\"\n    });\n  }\n};\nexport default authSlice.reducer;","map":{"version":3,"sources":["D:/react-typescript-starter/src/pages/auth/authSlice.ts"],"names":["createSlice","Swal","initialState","authenticated","message","authSlice","name","reducers","setAuthSuccess","state","setAuthFail","resetAuth","actions","selectAuthState","auth","login","history","dispatch","fire","title","text","icon","confirmButtonText","then","res","isConfirmed","window","localStorage","setItem","replace","error","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAE,KADE;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;AAKA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAGC,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACN,aAAN,GAAsB,IAAtB;AAEH,KAJK;AAKNO,IAAAA,WAAW,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACN,aAAN,GAAsB,KAAtB;AACH,KAPK;AAQNQ,IAAAA,SAAS,EAAE,MAAMT;AARX;AAHgB,CAAD,CAA7B;AAeA,OAAO,MAAM;AACTM,EAAAA,cADS;AAETE,EAAAA,WAFS;AAGTC,EAAAA;AAHS,IAITN,SAAS,CAACO,OAJP;AAMP,OAAO,MAAMC,eAAe,GAAIJ,KAAD,IAAsBA,KAAK,CAACK,IAApD;AAEP,OAAO,MAAMC,KAAK,GAAIC,OAAD,IAAiC,OAClDC,QADkD,KAE/C;AACH,MAAI;AACA;AACA;AACA;AACA,QAAG,IAAH,EAAS;AACL;AACAhB,MAAAA,IAAI,CAACiB,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAE,OADD;AAENC,QAAAA,IAAI,EAAE,kBAFA;AAGNC,QAAAA,IAAI,EAAE,SAHA;AAINC,QAAAA,iBAAiB,EAAE;AAJb,OAAV,EAKGC,IALH,CAKSC,GAAD,IAAS;AACb,YAAGA,GAAG,CAACC,WAAP,EAAoB;AAChBR,UAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACAkB,UAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0C,QAA1C;AACAZ,UAAAA,OAAO,CAACa,OAAR,CAAgB,YAAhB;AACH;AACJ,OAXD;AAYH;AACJ,GAnBD,CAmBE,OAAMC,KAAN,EAAa;AACX7B,IAAAA,IAAI,CAACiB,IAAL,CAAU;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,IAAI,EAAG,oCAAmCU,KAAK,CAAC1B,OAAQ,GAFlD;AAGNiB,MAAAA,IAAI,EAAE,OAHA;AAINC,MAAAA,iBAAiB,EAAE;AAJb,KAAV;AAMH;AACJ,CA9BM;AAgCP,eAAejB,SAAS,CAAC0B,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { RootState, AppThunk } from '../../redux/store';\r\nimport { AuthInputs } from './types';\r\n// import { API } from '../../api';\r\nimport Swal from \"sweetalert2\";\r\nimport { History } from 'history';\r\n\r\nexport interface AuthState {\r\n    status: 'loading' | 'success' | 'failed';\r\n}\r\n\r\nconst initialState = {\r\n    authenticated: false,\r\n    message: ''\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setAuthSuccess: (state) => {\r\n            state.authenticated = true;\r\n\r\n        },\r\n        setAuthFail: (state) => {\r\n            state.authenticated = false;\r\n        },\r\n        resetAuth: () => initialState\r\n    }\r\n});\r\n\r\nexport const {\r\n    setAuthSuccess,\r\n    setAuthFail,\r\n    resetAuth\r\n} = authSlice.actions\r\n\r\nexport const selectAuthState = (state: RootState) => state.auth;\r\n\r\nexport const login = (history : History): AppThunk => async (\r\n    dispatch,\r\n  ) => {\r\n    try {\r\n        // TODO: uncomment apiResponse when a backend is deployed\r\n        // const apiResponse = await API.login(data, {});\r\n        // if (apiResponse?.status === 200) {\r\n        if(true) {\r\n            // dispatch(setUser(apiResponse.data.data))\r\n            Swal.fire({\r\n                title: \"Login\",\r\n                text: \"Login Successful\",\r\n                icon: \"success\",\r\n                confirmButtonText: \"OK\",\r\n            }).then((res) => {\r\n                if(res.isConfirmed) {\r\n                    dispatch(setAuthSuccess());\r\n                    window.localStorage.setItem('AUTH_TOKEN', 'sample');\r\n                    history.replace('/dashboard');\r\n                }\r\n            });\r\n        } \r\n    } catch(error) {\r\n        Swal.fire({\r\n            title: \"Login\",\r\n            text: `Login Failed. Error encountered '${error.message}'`,\r\n            icon: \"error\",\r\n            confirmButtonText: \"OK\",\r\n        });\r\n    }\r\n};\r\n  \r\nexport default authSlice.reducer"]},"metadata":{},"sourceType":"module"}